package de.tum.cs.i1.pse;import static org.junit.Assert.*;import org.junit.Before;import org.junit.Test;import de.tum.cs.i1.pse.Order;import de.tum.cs.i1.pse.OrderImpl;import de.tum.cs.i1.pse.Warehouse;import de.tum.cs.i1.pse.WarehouseImpl;public class OrderStateTester {	private static String TALISKER = "Talisker";	private Warehouse warehouse;	/**	 * Sets up the Warehouse.<br/>	 * This method is performed before a test case is executed. 	 */	@Before	public void setUp() {		// Initialize the test warehouse.		warehouse = new WarehouseImpl();		// Add 50 Taliskers to the stock.		warehouse.add(TALISKER, 50);	}	/**	 * This unit test case tests the state of Order 	 * in case the warehouse has <b>enough</b> items in stock to fill the order. 	 */	@Test	public void orderIsFilledIfEnoughInWarehouse() {		// Create a new order for 50 bottles Talisker.		Order order = new OrderImpl(TALISKER, 50);		// Fill the order.		order.fill(warehouse);		// Indicate success, if the order state is "filled". 		assertTrue(order.isFilled());	}	/**	 * This unit test case tests the state of Order 	 * in case the warehouse does <b>not</b> have <b>enough</b> items in stock to fill the order. 	 */	public void orderDoesNotRemoveIfNotEnough() {		// TODO: Create a new order for Talisker, and specify a quantity that is above the current stock level.		// TODO: Ensure that this order cannot be filled.		// TODO: Make this a test case!	}}